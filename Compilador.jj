options {
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  LOOKAHEAD = 2;  // Aumentamos el lookahead global para resolver conflictos
}
PARSER_BEGIN(Compilador)
import java.util.*;
import java.io.*;

public class Compilador {
  static HashMap<String, String> tablaSimbolos = new HashMap<String, String>();
  static ArrayList<String> erroresSemanticos = new ArrayList<String>();
  static ArrayList<String> tablaErrores = new ArrayList<String>();

  private NodoAST astRaiz;

  static class NodoAST {
    private String valor;
    private String tipo;
    private ArrayList<NodoAST> hijos;

    public NodoAST(String valor, String tipo) {
      this.valor = valor;
      this.tipo = tipo;
      this.hijos = new ArrayList<NodoAST>();
    }

    public void agregarHijo(NodoAST hijo) {
      this.hijos.add(hijo);
    }

    public String getValor() { return valor; }
    public String getTipo() { return tipo; }
    public ArrayList<NodoAST> getHijos() { return hijos; }

    public void imprimirArbol(int nivel) {
      String indentacion = "|  ".repeat(nivel);
      String nodoStr = (valor != null && !valor.isEmpty()) ? tipo.toUpperCase() + " " + valor : tipo.toUpperCase();
      if (nivel == 0) {
        System.out.println("|" + nodoStr);
      } else {
        System.out.println(indentacion + "|_" + nodoStr);
      }
      for (NodoAST hijo : hijos) {
        hijo.imprimirArbol(nivel + 1);
      }
    }
  }

  public static void main(String args[]) throws ParseException {
    try {
      Compilador parser = new Compilador(new FileInputStream(args[0]));
      parser.programa();
      System.out.println("Análisis completado con éxito.");
      if (parser.astRaiz != null) {
        System.out.println("\nÁrbol Sintáctico Abstracto:");
        parser.astRaiz.imprimirArbol(0);
      }
      System.out.println("\nTabla de símbolos:");
      for (Map.Entry<String, String> entry : tablaSimbolos.entrySet()) {
        System.out.println("Variable: " + entry.getKey() + ", Tipo: " + entry.getValue());
      }
      if (!erroresSemanticos.isEmpty()) {
        System.out.println("\nErrores semánticos encontrados:");
        for (String error : erroresSemanticos) {
          System.out.println(error);
        }
      }
    } catch (FileNotFoundException e) {
      System.out.println("Archivo no encontrado: " + e.getMessage());
    } catch (ParseException e) {
      System.out.println("Error de sintaxis: " + e.getMessage());
    }
  }

  // Métodos para manejar variables y errores
  private static boolean existeVariable(String nombre) {
    return tablaSimbolos.containsKey(nombre);
  }

  private static void agregarVariable(String nombre, String tipo) {
    tablaSimbolos.put(nombre, tipo);
  }

  private static void agregarErrorSemantico(String mensaje) {
    erroresSemanticos.add(mensaje);
  }

  // Método para obtener el tipo de una variable
  private static String obtenerTipo(String nombre) {
    return tablaSimbolos.getOrDefault(nombre, "desconocido");
  }

  // Método para verificar compatibilidad de tipos
  private static boolean sonTiposCompatibles(String tipo1, String tipo2) {
    // Tipos idénticos son compatibles
    if (tipo1.equals(tipo2)) {
      return true;
    }
    // Enteros pueden asignarse a flotantes (conversión implícita)
    if (tipo1.equals("flot") && tipo2.equals("ent")) {
      return true;
    }
    // Cualquier cosa puede concatenarse a una cadena
    if (tipo1.equals("cad") && (tipo2.equals("ent") || tipo2.equals("flot") || tipo2.equals("bool"))) {
      return true;
    }
    // No se permiten otras combinaciones por ahora
    return false;
  }
}
PARSER_END(Compilador)

// Tokens a ignorar
SKIP: { " " |"\t" |"\r" }
SPECIAL_TOKEN: { "\n" }

// Definición de tokens
TOKEN: //Variables
{
  <ENT: "ent"> |
  <FLOT: "flot"> |
  <BOOL: "bool"> |
  <CAD: "cad"> |
  <VAR: "var">
}

TOKEN: //Operadores Logicos-Aritmeticos
{
  <MAS: "mas"> |
  <MENOS: "menos"> |
  <MULT: "mult"> |
  <DIV: "div"> |
  <RES: "res"> |
  <INC: "inc"> |
  <DEC: "dec"> |
  <AND: "AND"> |
  <OR: "OR"> |
  <NOT: "NOT">
}

TOKEN: //Comparadores
{
  <IGUALDAD: "=="> |
  <IGUAL: "="> |
  <DESIGUALDAD: "!="> |
  <MAYOR: ">"> |
  <MENOR: "<"> |
  <MAYORIGUAL: ">="> |
  <MENORIGUAL: "<=">
}

TOKEN: //DIGITOS
{
  <ENTEROS: (["0"-"9"])+> |
  <NUMERODECIMAL: (["0"-"9"])*("."["0"-"9"]["0"-"9"])|(["0"-"9"])*("."["0"-"9"])+>
}

TOKEN: // Reconocimiento de valores
{
  <VERDADERO: "true"> |
  <FALSO: "false">
}

TOKEN: //CICLOS
{
  <FOR: "for"> |
  <WHILE: "while">
}

TOKEN: //ARREGLOS
{
  <MATRIZ: "matrix"> |
  <VECTOR: "vec">
}

TOKEN: //CONDICIONALES
{
  <SI: "SI"> |
  <SINO: "SINO">
}

TOKEN: //LECTURA
{
  <LEER: "leer">
}

TOKEN: //ESCRITURA
{
  <ESCRIBIR: "escribir">
}

TOKEN: //SIMBOLOS DE DELIMITACION
{
  <PUNTO: "."> |
  <DELIMITADOR: ";"> |
  <COMA: ","> |
  <CORCHIZQ: "["> |
  <CORCHDER: "]"> |
  <LLAVEIZQ: "{"> |
  <LLAVEDER: "}"> |
  <PARENIZQ: "("> |
  <PARENDER: ")"> |
  <CONCATENAR: "+">
}

TOKEN: //Palabras Reservadas
{
  <VOID: "void"> |
  <PUBLICO: "publico"> |
  <PRIVADO: "privado"> |
  <ESTATICO: "estatico"> |
  <RETURN: "return">
}

TOKEN:
{
  <MATH: "Math"> |
  <ARRAYCLASS: "Array"> |
  <RANDOMCLASS: "Random"> |
  <TIMERCLASS: "Timer">
}

TOKEN: //FUNCIONES DE CLASES
{
  <RAMDONFUNC: (<RANDOMCLASS>)"."("next"|"equals")> |
  <ARRAYFUNC: (<ARRAYCLASS>)"."("clear"|"clone"|"copy"|"reverse")> |
  <TIMERFUNC: (<TIMERCLASS>)"."("start"|"stop")> |
  <MATHFUNC: (<MATH>)"."("abs"|"acos"|"acosh"|"tan"|"cos"|"sen"|"random"|"sqrt")> |
  <INICIO: "Inicio"> |
  <FIN: "Fin"> |
  <MAIN: "Main"|"main"> |
  <PROC: "proc"> |
  <FUNC: "func">
}

TOKEN: // IDENTIFICADOR
{
  <IDENTIFICADOR: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

TOKEN: //Reconocimiento de valores
{
  <VCAD: "\""(["a"-"z"]|["A"-"Z"]|["0"-"9"]|[","]|["."]|[" "]|[":"]|["="])+"\"">
}

TOKEN: // Manejo de Errores
{
  <ERROR: ~[]>
}

// Definición de la gramática - Análisis Sintáctico
NodoAST programa() :
{ NodoAST raiz = new NodoAST("", "PROGRAMA"); NodoAST subNodo; }
{
  <INICIO> { raiz.agregarHijo(new NodoAST("", "INICIO")); }
  <MAIN> { raiz.agregarHijo(new NodoAST("", "Main")); }
  <LLAVEIZQ> { raiz.agregarHijo(new NodoAST("", "{")); }
  (
    (subNodo = declaracion() { raiz.agregarHijo(subNodo); }) |
    (subNodo = asignacion() { raiz.agregarHijo(subNodo); }) |
    (subNodo = ciclo() { raiz.agregarHijo(subNodo); }) |
    (subNodo = condicional() { raiz.agregarHijo(subNodo); }) |
    (subNodo = llamadaFuncion() { raiz.agregarHijo(subNodo); }) |
    (subNodo = declaracionFuncion() { raiz.agregarHijo(subNodo); })
  )*
  <LLAVEDER> { raiz.agregarHijo(new NodoAST("", "}")); }
  <FIN> { raiz.agregarHijo(new NodoAST("", "FIN")); }
  <EOF>
  { astRaiz = raiz; return raiz; }
}

NodoAST declaracion() :
{ Token tipo, id; NodoAST nodo = new NodoAST("", "DECLARAR VARIABLE"); NodoAST nodoExpr = null; }
{
  <VAR> { nodo.agregarHijo(new NodoAST("", "var")); }
  (tipo = <ENT> | tipo = <FLOT> | tipo = <BOOL> | tipo = <CAD>)
  { nodo.agregarHijo(new NodoAST(tipo.image, "Tipo")); }
  id = <IDENTIFICADOR>
  {
    nodo.agregarHijo(new NodoAST(id.image, "Identificador"));
    if (existeVariable(id.image)) {
      agregarErrorSemantico("Error semántico: Variable '" + id.image + "' ya declarada");
    } else {
      agregarVariable(id.image, tipo.image);
    }
  }
  (
    <IGUAL> { nodo.agregarHijo(new NodoAST("", "=")); }
    nodoExpr = expresion()
    {
      nodo.agregarHijo(nodoExpr);
      if (!sonTiposCompatibles(tipo.image, nodoExpr.getTipo())) {
        agregarErrorSemantico("Error semántico: No se puede asignar un valor de tipo '" +
                              nodoExpr.getTipo() + "' a una variable de tipo '" + tipo.image + "'");
      }
    }
  )?
  <DELIMITADOR> { nodo.agregarHijo(new NodoAST("", ";")); }
  { return nodo; }
}


NodoAST asignacion() :
{ Token id; NodoAST nodo; NodoAST nodoExpr; String tipoVar; }
{
  id = <IDENTIFICADOR>
  {
    nodo = new NodoAST(id.image, "ASIGNACION");
    if (!existeVariable(id.image)) {
      agregarErrorSemantico("Error semántico: Variable '" + id.image + "' no declarada");
      tipoVar = "desconocido";
    } else {
      tipoVar = obtenerTipo(id.image);
    }
  }
  <IGUAL> { nodo.agregarHijo(new NodoAST("", "=")); }
  nodoExpr = expresion()
  {
    nodo.agregarHijo(nodoExpr);
    if (existeVariable(id.image) && !sonTiposCompatibles(tipoVar, nodoExpr.getTipo())) {
      agregarErrorSemantico("Error semántico: No se puede asignar un valor de tipo '" + nodoExpr.getTipo() +
                            "' a una variable de tipo '" + tipoVar + "'");
    }
  }
  <DELIMITADOR> { nodo.agregarHijo(new NodoAST("", ";")); }
  { return nodo; }
}

NodoAST expresion() :
{ NodoAST nodoIzq, nodoDer; NodoAST nodoOp = null; }
{
  nodoIzq = termino()
  (
    { String op = null; String tipoResultado = nodoIzq.getTipo(); }
    ( <MAS> { op = "mas"; } | <CONCATENAR> { op = "concatenar"; } )
    nodoDer = termino()
    {
      nodoOp = new NodoAST(op, "OPERADOR");
      nodoOp.agregarHijo(nodoIzq);
      nodoOp.agregarHijo(nodoDer);
      // Determinar el tipo resultante
      if (op.equals("concatenar") || (nodoIzq.getTipo().equals("cad") || nodoDer.getTipo().equals("cad"))) {
        tipoResultado = "cad"; // Concatenar siempre resulta en cadena
      } else if (nodoIzq.getTipo().equals("flot") || nodoDer.getTipo().equals("flot")) {
        tipoResultado = "flot"; // Si hay un flotante, el resultado es flotante
      } else if (nodoIzq.getTipo().equals("ent") && nodoDer.getTipo().equals("ent")) {
        tipoResultado = "ent"; // Ambos enteros, resultado entero
      } else {
        agregarErrorSemantico("Error semántico: Operación '" + op + "' no válida entre '" +
                              nodoIzq.getTipo() + "' y '" + nodoDer.getTipo() + "'");
        tipoResultado = "desconocido";
      }
      nodoOp = new NodoAST(op, tipoResultado);
      nodoOp.agregarHijo(nodoIzq);
      nodoOp.agregarHijo(nodoDer);
      nodoIzq = nodoOp;
    }
  )*
  { return nodoIzq; }
}

NodoAST termino() :
{ Token valor = null, id = null; NodoAST nodo; }
{
  (
    valor = <ENTEROS> { nodo = new NodoAST(valor.image, "ent"); }
  | valor = <NUMERODECIMAL> { nodo = new NodoAST(valor.image, "flot"); }
  | valor = <VCAD> { nodo = new NodoAST(valor.image, "cad"); }
  | valor = <VERDADERO> { nodo = new NodoAST(valor.image, "bool"); }
  | valor = <FALSO> { nodo = new NodoAST(valor.image, "bool"); }
  | <PARENIZQ> nodo = expresion() <PARENDER>
  | id = <IDENTIFICADOR>
    {
      if (!existeVariable(id.image)) {
        agregarErrorSemantico("Error semántico: Variable '" + id.image + "' no declarada");
        nodo = new NodoAST(id.image, "desconocido");
      } else {
        nodo = new NodoAST(id.image, obtenerTipo(id.image));
      }
    }
  )
  { return nodo; }
}

NodoAST ciclo() :
{ NodoAST nodo; }
{
  (nodo = cicloFor()) | (nodo = cicloWhile())
  { return nodo; }
}

NodoAST cicloFor() :
{ NodoAST nodo = new NodoAST("for", "ciclo"); NodoAST declAsig, cond, inc; }
{
  <FOR> <PARENIZQ>
  (declAsig = declaracion() | declAsig = asignacion()) { nodo.agregarHijo(declAsig); }
  cond = condicion() { nodo.agregarHijo(cond); }
  <DELIMITADOR>
  inc = incremento() { nodo.agregarHijo(inc); }
  <PARENDER>
  { NodoAST bloqueNodo = bloque(); nodo.agregarHijo(bloqueNodo); }
  { return nodo; }
}

NodoAST cicloWhile() :
{ NodoAST nodo = new NodoAST("while", "ciclo"); }
{
  <WHILE> <PARENIZQ>
  { NodoAST cond = condicion(); nodo.agregarHijo(cond); }
  <PARENDER>
  { NodoAST bloqueNodo = bloque(); nodo.agregarHijo(bloqueNodo); }
  { return nodo; }
}

NodoAST condicion() :
{ Token id1 = null, id2 = null; NodoAST nodoIzq, nodoDer, nodoOp; String op; }
{
  (
    id1 = <IDENTIFICADOR>
    {
      if (!existeVariable(id1.image)) {
        agregarErrorSemantico("Error semántico: Variable '" + id1.image + "' no declarada");
        nodoIzq = new NodoAST(id1.image, "Identificador");
      } else {
        nodoIzq = new NodoAST(id1.image, "Identificador");
      }
    }
  | <ENTEROS> { nodoIzq = new NodoAST(token.image, "num"); }
  | <NUMERODECIMAL> { nodoIzq = new NodoAST(token.image, "num"); }
  )
  (
    <IGUALDAD> { op = "=="; } | <DESIGUALDAD> { op = "!="; } | <MAYOR> { op = ">"; }
  | <MENOR> { op = "<"; } | <MAYORIGUAL> { op = ">="; } | <MENORIGUAL> { op = "<="; }
  ) { nodoOp = new NodoAST(op, "CONDICION"); }
  (
    id2 = <IDENTIFICADOR>
    {
      if (!existeVariable(id2.image)) {
        agregarErrorSemantico("Error semántico: Variable '" + id2.image + "' no declarada");
        nodoDer = new NodoAST(id2.image, "Identificador");
      } else {
        nodoDer = new NodoAST(id2.image, "Identificador");
      }
    }
  | <ENTEROS> { nodoDer = new NodoAST(token.image, "num"); }
  | <NUMERODECIMAL> { nodoDer = new NodoAST(token.image, "num"); }
  )
  {
    nodoOp.agregarHijo(nodoIzq);
    nodoOp.agregarHijo(nodoDer);
    return nodoOp;
  }
}

void operadorComparacion() :
{}
{
  <IGUALDAD> | <DESIGUALDAD> | <MAYOR> | <MENOR> | <MAYORIGUAL> | <MENORIGUAL>
}

NodoAST incremento() :
{ Token id; NodoAST nodo; String op; }
{
  id = <IDENTIFICADOR>
  {
    if (!existeVariable(id.image)) {
      agregarErrorSemantico("Error semántico: Variable '" + id.image + "' no declarada");
      nodo = new NodoAST(id.image, "desconocido");
    } else if (!obtenerTipo(id.image).equals("ent") && !obtenerTipo(id.image).equals("flot")) {
      agregarErrorSemantico("Error semántico: El incremento solo se puede aplicar a variables numéricas");
      nodo = new NodoAST(id.image, "desconocido");
    } else {
      nodo = new NodoAST(id.image, obtenerTipo(id.image));
    }
  }
  ( <INC> { op = "inc"; } | <DEC> { op = "dec"; } )
  {
    NodoAST nodoOp = new NodoAST(op, "INCREMENTO");
    nodoOp.agregarHijo(nodo);
    return nodoOp;
  }
}

NodoAST bloque() :
{ NodoAST nodo = new NodoAST("", "{"); NodoAST subNodo; }
{
  <LLAVEIZQ>
  (
    (subNodo = declaracion() { nodo.agregarHijo(subNodo); }) |
    (subNodo = asignacion() { nodo.agregarHijo(subNodo); }) |
    (subNodo = ciclo() { nodo.agregarHijo(subNodo); }) |
    (subNodo = condicional() { nodo.agregarHijo(subNodo); }) |
    (subNodo = llamadaFuncion() { nodo.agregarHijo(subNodo); })
  )*
  <LLAVEDER> { nodo.agregarHijo(new NodoAST("", "}")); }
  { return nodo; }
}

NodoAST condicional() :
{ NodoAST nodo = new NodoAST("", "SI"); NodoAST cond, bloqueSi, bloqueSino = null; }
{
  <SI> <PARENIZQ> { nodo.agregarHijo(new NodoAST("", "(")); }
  cond = condicion() { nodo.agregarHijo(cond); }
  <PARENDER> { nodo.agregarHijo(new NodoAST("", ")")); }
  { NodoAST bloqueNodo = bloque(); nodo.agregarHijo(bloqueNodo); }
  (
    <SINO> { nodo.agregarHijo(new NodoAST("", "SINO")); }
    bloqueSino = bloque() { nodo.agregarHijo(bloqueSino); }
  )?
  { return nodo; }
}

// Modificamos llamadaFuncion() para evitar conflictos y devolver el tipo
NodoAST llamadaFuncion() :
{ Token id = null; NodoAST nodo = new NodoAST("", "ESCRIBIR"); }
{
  (<ESCRIBIR>)
  <PARENIZQ> { nodo.agregarHijo(new NodoAST("", "(")); }
  { NodoAST param = expresion(); nodo.agregarHijo(param); }
  <PARENDER> { nodo.agregarHijo(new NodoAST("", ")")); }
  <DELIMITADOR> { nodo.agregarHijo(new NodoAST("", ";")); }
  { return nodo; }
}

void parametrosLlamada(NodoAST nodoPadre) :
{ NodoAST param; }
{
  param = expresion() { nodoPadre.agregarHijo(param); }
  (<COMA> param = expresion() { nodoPadre.agregarHijo(param); })*
}
  NodoAST declaracionFuncion() :
  { Token tipo, id; NodoAST nodo; NodoAST params = null; }
  {
    (
      <PROC> { nodo = new NodoAST("proc", "declaracion_funcion"); } |
      <FUNC> { nodo = new NodoAST("func", "declaracion_funcion"); }
    )
    (tipo = <VOID> | tipo = <ENT> | tipo = <FLOT> | tipo = <BOOL> | tipo = <CAD>)
    id = <IDENTIFICADOR>
    { nodo = new NodoAST(id.image, nodo.getTipo() + "_" + tipo.image); }
    <PARENIZQ>
    (params = parametrosDeclaracion() { nodo.agregarHijo(params); })?
    <PARENDER>
    { NodoAST bloqueNodo = bloqueFuncion(); nodo.agregarHijo(bloqueNodo); }
    { return nodo; }
  }

  NodoAST parametrosDeclaracion() :
  { Token tipo, id; NodoAST nodo = new NodoAST("parametros", "parametros"); }
  {
    (tipo = <ENT> | tipo = <FLOT> | tipo = <BOOL> | tipo = <CAD> | tipo = <VAR>)
    id = <IDENTIFICADOR>
    {
      NodoAST param = new NodoAST(id.image, tipo.image);
      nodo.agregarHijo(param);
      agregarVariable(id.image, tipo.image);
    }
    (
      <COMA>
      { NodoAST subParams = parametrosDeclaracion();
        for (NodoAST hijo : subParams.getHijos()) { nodo.agregarHijo(hijo); } }
    )?
    { return nodo; }
  }

  NodoAST bloqueFuncion() :
  { NodoAST nodo = new NodoAST("bloque", "bloque_funcion"); NodoAST subNodo; }
  {
    <LLAVEIZQ>
    (
      (subNodo = declaracion() { nodo.agregarHijo(subNodo); }) |
      (subNodo = asignacion() { nodo.agregarHijo(subNodo); }) |
      (subNodo = ciclo() { nodo.agregarHijo(subNodo); }) |
      (subNodo = condicional() { nodo.agregarHijo(subNodo); }) |
      (subNodo = llamadaFuncion() { nodo.agregarHijo(subNodo); })
    )*
    (subNodo = retorno() { nodo.agregarHijo(subNodo); })?
    <LLAVEDER>
    { return nodo; }
  }

  NodoAST retorno() :
  { NodoAST nodo = new NodoAST("return", "retorno"); NodoAST expr; }
  {
    <RETURN>
    expr = expresion() { nodo.agregarHijo(expr); }
    <DELIMITADOR>
    { return nodo; }
  }